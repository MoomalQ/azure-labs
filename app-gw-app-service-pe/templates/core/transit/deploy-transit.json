{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "appGwPrivateIp": {
            "type": "string",
            "metadata": {
                "description": "The private IP address assigned to the Application Gateway private interface"
            }
        },
        "cloudAddressSpace": {
            "type": "string",
            "metadata": {
                "description": "The CIDR block that will be dedicated to this Azure environment"
            }
        },
        "customWebDomain": {
            "type": "string",
            "metadata": {
                "description": "The custom domain name to be used for internal access to the application via the Application Gateway"
            }
        },
        "keyVaultAdminObjectId": {
            "type": "string",
            "metadata": {
                "description": "The object ID of the security principal that will have full permissions over Key Vault"
            }
        },
        "networkWatcherRg": {
            "type": "string",
            "metadata": {
                "description": "The resource group where the Network Watcher instances are stored"
            },
            "defaultValue": "NetworkWatcherRG"
        },
        "roleNameGuid": {
            "type": "string",
            "defaultValue": "[newGuid()]",
            "metadata": {
                "description": "A new GUID used to identify the role assignment"
            }
        },
        "sharedServicesVnetCidr": {
            "type": "string",
            "metadata": {
                "description": "The CIRD assigned to the Shared Services virtual network"
            }
        },
        "sharedSvcRgName": {
            "type": "string",
            "metadata": {
                "description": "The name of the resource group Shared Services resources are stored in"
            }
        },
        "sharedSvcSubscriptionId": {
            "type": "string",
            "metadata": {
                "description": "The id of the Azure subscription where Shared Services resources are stored"
            }
        },
        "transitAppGwSubnetCidr": {
            "type": "string",
            "metadata": {
                "description": "The CIDR assigned to the Application Gateway subnet in the transit virtual network"
            }
        },
        "transitBastionSubnetCidr": {
            "type": "string",
            "metadata": {
                "description": "The CIDR assigned to the Bastion subnet in the transit virtual network"
            }
        },
        "transitFwSubnetPayCidr": {
            "type": "string",
            "metadata": {
                "description": "The CIDR assigned to the Azure Firewall payload subnet in the transit virtual network"
            }
        },
        "transitGatewaySubnetCidr": {
            "type": "string",
            "metadata": {
                "description": "The CIDR assigned to the Gateway subnet in the transit virtual network"
            }
        },
        "transitVnetCidr": {
            "type": "string",
            "metadata": {
                "description": "The CIDR assigned to the transit virtual network"
            }
        },
        "tags": {
            "type": "object",
            "metadata": {
                "description": "The tags that will be associated to the resources"
            },
            "defaultValue": {
                "environment": "lab"
            }
        },
        "uniqueData": {
            "type": "string",
            "metadata": {
                "description": "Data used to append to resources to ensure uniqueness"
            },
            "defaultValue": "[substring(newGuid(),0,8)]"
        },
        "workloadVnetCidr": {
            "type": "string",
            "metadata": {
                "description": "The CIDR assignged the Workload virtual network"
            }
        }
    },
    "variables": {
        "diagnosticApiVersion": "2017-05-01-preview",
        "dnsApiVersion": "2018-09-01",
        "managedIdentityApiVersion": "2018-11-30",
        "networkApiVersion": "2020-07-01",
        "resourcesApiVersion": "2020-06-01",
        "roleAssignmentApiVersion": "2020-08-01-preview",
        "storageApiVersion": "2019-06-01",
        "_generalTemplatesUri": "[uri(deployment().properties.templateLink.uri, '../../general/')]",
        "appGwCertCreate": "deploy-script-agw-create",
        "appGwCertName": "[concat('agw', parameters('uniqueData'))]",
        "appGwName": "[concat('agw',parameters('uniqueData'))]",
        "appGwPostDeploymentUri": "[concat(variables('_generalTemplatesUri'), 'deploy-deployment-script.json')]",
        "appGwPublicIpName": "[concat('pip-agw', parameters('uniqueData'))]",
        "appGwRouteTableName": "rt-agw",
        "appGwSubnetName": "snet-agw",
        "appGwUmi": "[concat('agw-umi',parameters('uniqueData'))]",
        "appServicesPrivateDnsZoneName": "privatelink.azurewebsites.net",
        "appServicesPlLinkName": "[concat(variables('appServicesPrivateDnsZoneName'), '-link')]",
        "applicationGatewayId": "[resourceId('Microsoft.Network/applicationGateways', variables('appGwName'))]",
        "bastionName": "[concat('bst', parameters('uniqueData'))]",
        "bastionNsgName": "[concat('nsg-bst', parameters('uniqueData'))]",
        "bastionPublicIpName": "[concat('pip-bst', parameters('uniqueData'))]",
        "bastionSubnetName": "AzureBastionSubnet",
        "deployAppGwRt": "deploy-appgwroutetable",
        "deployBastionNsgFlowLog": "deploy-bastionnsgflowlog",
        "deployDnsServerSettings": "deploy-dnsserversettings",
        "deployFirewallPolicy": "deploy-firewallpolicy",
        "deployKeyVault": "deploy-keyvault-central",
        "deploymentScriptUmi": "[concat('arm-umi',parameters('uniqueData'))]",
        "dsScriptUmiDeploy": "deploy-ds-umi",
        "deployLaw": "deploy-sharedsvclaw",
        "firewallAz": [
            "1"
        ],
        "firewallName": "[concat('fw', parameters('uniqueData'))]",
        "firewallDeploymentUri": "[concat(variables('_generalTemplatesUri'), 'deploy-fw-policy.json')]",
        "firewallPublicIpName": "[concat('pip-fw', parameters('uniqueData'))]",
        "fwPayloadSubnetName": "AzureFirewallSubnet",
        "gatewaySubnetName": "GatewaySubnet",
        "keyVaultDeploymentUri": "[concat(variables('_generalTemplatesUri'), 'deploy-key-vault.json')]",
        "keyVaultAgwPermDeploymentName": "deploy-kv-agw-perm",
        "keyVaultDsPermDeploymentName": "deploy-kv-ds-perm",
        "keyVaultPermDeploymentUri": "[concat(variables('_generalTemplatesUri'), 'deploy-key-vault-permissions.json')]",
        "keyVaultPrivateDnsZoneName": "privatelink.vaultcore.azure.net",
        "keyVaultPlLinkName": "[concat(variables('keyVaultPrivateDnsZoneName'), '-link')]",
        "lawDeploymentUri": "[concat(variables('_generalTemplatesUri'), 'deploy-law.json')]",
        "logStorageAccountName": "[concat('stcent', parameters('uniqueData'))]",
        "transitVnetName": "[concat('vnet-transit', parameters('uniqueData'))]",
        "nsgDeploymentUri": "[concat(variables('_generalTemplatesUri'), 'deploy-nsg-flow-log.json')]",
        "location": "[resourceGroup().location]",
        "uniqueWebAppName": "[concat('app',parameters('uniqueData'))]",
        "vnetStandardDdosProtection": false
    },
    "resources": [
        {
            "name": "[variables('deployLaw')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('resourcesApiVersion')]",
            "subscriptionId": "[parameters('sharedSvcSubscriptionId')]",
            "resourceGroup": "[parameters('sharedSvcRgName')]",
            "dependsOn": [
            ],
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "tags": {
                        "value": "[parameters('tags')]"
                    },
                    "uniqueData": {
                        "value": "[parameters('uniqueData')]"
                    }
                },
                "templateLink": {
                    "uri": "[variables('lawDeploymentUri')]",
                    "contentVersion": "1.0.0.0"
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "[variables('storageApiVersion')]",
            "name": "[variables('logStorageAccountName')]",
            "location": "[variables('location')]",
            "tags": "[parameters('tags')]",
            "kind": "StorageV2",
            "sku": {
                "name": "Standard_RAGRS"
            },
            "properties": {
                "networkAcls": {
                    "bypass": "AzureServices",
                    "virtualNetworkRules": [],
                    "ipRules": [],
                    "defaultAction": "Deny"
                },
                "supportsHttpsTrafficOnly": true
            }
        },
        {
            "name": "[variables('bastionPublicIpName')]",
            "type": "Microsoft.Network/publicIpAddresses",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[parameters('tags')]",
            "properties": {
                "publicIpAllocationMethod": "Static"
            },
            "sku": {
                "name": "Standard"
            }
        },
        {
            "name": "[variables('firewallPublicIpName')]",
            "type": "Microsoft.Network/publicIpAddresses",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[parameters('tags')]",
            "properties": {
                "publicIpAllocationMethod": "Static"
            },
            "sku": {
                "name": "Standard"
            }
        },
        {
            "name": "[variables('appGwPublicIpName')]",
            "type": "Microsoft.Network/publicIpAddresses",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[parameters('tags')]",
            "properties": {
                "publicIpAllocationMethod": "Static"
            },
            "sku": {
                "name": "Standard"
            }
        },
        {
            "name": "[variables('deployFirewallPolicy')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('resourcesApiVersion')]",
            "dependsOn": [
            ],
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "appGatewayCidr": {
                        "value": "[parameters('transitAppGwSubnetCidr')]"
                    },
                    "appServicesFqdn": {
                        "value": "[concat(variables('uniqueWebAppName'),'.azurewebsites.net')]"
                    },
                    "cloudAddressSpace": {
                        "value": "[parameters('cloudAddressSpace')]"
                    },
                    "sharedServicesVnetCidr": {
                        "value": "[parameters('sharedServicesVnetCidr')]"
                    },
                    "transitVnetCidr": {
                        "value": "[parameters('transitVnetCidr')]"
                    },
                    "workloadVnetCidr": {
                        "value": "[parameters('workloadVnetCidr')]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    },
                    "uniqueData": {
                        "value": "[parameters('uniqueData')]"
                    }
                },
                "templateLink": {
                    "uri": "[variables('firewallDeploymentUri')]",
                    "contentVersion": "1.0.0.0"
                }
            }
        },
        {
            "name": "[variables('bastionNsgName')]",
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[parameters('tags')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "AllowHttps",
                        "properties": {
                            "description": "Allow incoming HTTPS traffic from Internet",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "Internet",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowControlPlane",
                        "properties": {
                            "description": "Allow control plane traffic",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRanges": [
                                "443",
                                "4443"
                            ],
                            "sourceAddressPrefix": "GatewayManager",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 101,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowDataPlane",
                        "properties": {
                            "description": "Allows Azure Bastion data plane traffic",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRanges": [
                                "8080",
                                "5701"
                            ],
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 102,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowHealthProbes",
                        "properties": {
                            "description": "Allows health probes from Azure Load Balancer",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "AzureLoadBalancer",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 103,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "DenyAllInbound",
                        "properties": {
                            "description": "Deny all inbound traffic",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowOutboundDataPlane",
                        "properties": {
                            "description": "Allows Azure Bastion data plane traffic",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRanges": [
                                "8080",
                                "5701"
                            ],
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "AzureCloud",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "AllowOutboundAzureCloud",
                        "properties": {
                            "description": "Allows Bastion hosts to communicate with management components",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "AzureCloud",
                            "access": "Allow",
                            "priority": 101,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "AllowOutboundInternet",
                        "properties": {
                            "description": "Allows Bastion to validate certificates",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 102,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "AllowOutboundVirtualNetwork",
                        "properties": {
                            "description": "Allows Bastion to connect to VMs over SSH and RDP",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRanges": [
                                "3389",
                                "22"
                            ],
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 103,
                            "direction": "Outbound"
                        }
                    }
                ]
            }
        },
        {
            "name": "[variables('deployBastionNsgFlowLog')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('resourcesApiVersion')]",
            "resourceGroup": "[parameters('networkWatcherRg')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('bastionNsgName'))]",
                "[concat('Microsoft.Resources/deployments/',variables('deployLaw'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('logStorageAccountName'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "uniqueData": {
                        "value": "[parameters('uniqueData')]"
                    },
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "targetLaWorkspaceResourceId": {
                        "value": "[reference(variables('deployLaw')).outputs.logAnalyticsResourceId.value]"
                    },
                    "targetNsgName": {
                        "value": "[variables('bastionNsgName')]"
                    },
                    "targetNsgResourceId": {
                        "value": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('bastionNsgName'))]"
                    },
                    "targetStorageResourceId": {
                        "value": "[resourceId('Microsoft.Storage/storageAccounts',variables('logStorageAccountName'))]"
                    }
                },
                "templateLink": {
                    "uri": "[variables('nsgDeploymentUri')]",
                    "contentVersion": "1.0.0.0"
                }
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('transitVnetName')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[parameters('tags')]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', variables('deployBastionNsgFlowLog'))]"
            ],
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[parameters('transitVnetCidr')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('gatewaySubnetName')]",
                        "properties": {
                            "addressPrefix": "[parameters('transitGatewaySubnetCidr')]"
                        }
                    },
                    {
                        "name": "[variables('bastionSubnetName')]",
                        "properties": {
                            "addressPrefix": "[parameters('transitBastionSubnetCidr')]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('bastionNsgName'))]"
                            }
                        }
                    },
                    {
                        "name": "[variables('fwPayloadSubnetName')]",
                        "properties": {
                            "addressPrefix": "[parameters('transitFwSubnetPayCidr')]"
                        }
                    },
                    {
                        "name": "[variables('appGwSubnetName')]",
                        "properties": {
                            "addressPrefix": "[parameters('transitAppGwSubnetCidr')]"
                        }
                    }
                ],
                "enableDdosProtection": "[variables('vnetStandardDdosProtection')]"
            },
            "resources": [
            ]
        },
        {
            "name": "[variables('firewallName')]",
            "type": "Microsoft.Network/azureFirewalls",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[parameters('tags')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIpAddresses', variables('firewallPublicIpName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('transitVnetName'))]",
                "[concat('Microsoft.Resources/deployments/', variables('deployFirewallPolicy'))]"
            ],
            "zones": "[variables('firewallAz')]",
            "properties": {
                "firewallPolicy": {
                    "id": "[reference(variables('deployFirewallPolicy')).outputs.firewallPolicyId.value]"
                },
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('transitVnetName'), variables('fwPayloadSubnetName'))]"
                            },
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIpAddresses', variables('firewallPublicIpName'))]"
                            }
                        }
                    }
                ],
                "sku": {
                    "tier": "Premium"
                }
            }
        },
        {
            "name": "[concat(variables('firewallName'),'/microsoft.insights/diag')]",
            "type": "Microsoft.Network/azureFirewalls/providers/diagnosticSettings",
            "apiVersion": "[variables('diagnosticApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[parameters('tags')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/azureFirewalls',variables('firewallName'))]"
            ],
            "properties": {
                "name": "SendToWorkspace",
                "workspaceId": "[reference(variables('deployLaw')).outputs.logAnalyticsResourceId.value]",
                "logs": [
                    {
                        "category": "AzureFirewallApplicationRule",
                        "enabled": true
                    },
                    {
                        "category": "AzureFirewallNetworkRule",
                        "enabled": true
                    },
                    {
                        "category": "AzureFirewallDnsProxy",
                        "enabled": true
                    }
                ],
                "metrics": [
                    {
                        "category": "AllMetrics",
                        "enabled": true
                    }
                ]
            },
            "resources": [
            ]
        },
        {
            "type": "Microsoft.Network/privateDnsZones",
            "apiVersion": "[variables('dnsApiVersion')]",
            "name": "[variables('keyVaultPrivateDnsZoneName')]",
            "location": "global"
        },
        {
            "type": "Microsoft.Network/privateDnsZones",
            "apiVersion": "[variables('dnsApiVersion')]",
            "name": "[variables('appServicesPrivateDnsZoneName')]",
            "location": "global"
        },
        {
            "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
            "apiVersion": "[variables('dnsApiVersion')]",
            "name": "[concat(variables('keyVaultPrivateDnsZoneName'), '/', variables('keyVaultPlLinkName'))]",
            "location": "global",
            "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', variables('keyVaultPrivateDnsZoneName'))]",
                "[resourceId('Microsoft.Network/azureFirewalls',variables('firewallName'))]"
            ],
            "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('transitVnetName'))]"
                }
            }
        },
        {
            "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
            "apiVersion": "[variables('dnsApiVersion')]",
            "name": "[concat(variables('appServicesPrivateDnsZoneName'), '/', variables('appServicesPlLinkName'))]",
            "location": "global",
            "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', variables('appServicesPrivateDnsZoneName'))]",
                "[concat('Microsoft.Network/privateDnsZones/',variables('keyVaultPrivateDnsZoneName'), '/virtualNetworkLinks/', variables('keyVaultPlLinkName'))]"
            ],
            "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('transitVnetName'))]"
                }
            }
        },
        {
            "name": "[variables('deployDnsServerSettings')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('resourcesApiVersion')]",
            "dependsOn": [
                "[concat('Microsoft.Network/azureFirewalls/',variables('firewallName'),'/providers/microsoft.insights/diagnosticSettings/diag')]",
                "[concat('Microsoft.Network/privateDnsZones/',variables('appServicesPrivateDnsZoneName'), '/virtualNetworkLinks/', variables('appServicesPlLinkName'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                        {
                            "type": "Microsoft.Network/virtualNetworks",
                            "name": "[variables('transitVnetName')]",
                            "apiVersion": "[variables('networkApiVersion')]",
                            "location": "[variables('location')]",
                            "tags": "[parameters('tags')]",
                            "dependsOn": [
                            ],
                            "properties": {
                                "addressSpace": {
                                    "addressPrefixes": [
                                        "[parameters('transitVnetCidr')]"
                                    ]
                                },
                                "subnets": [
                                    {
                                        "name": "[variables('gatewaySubnetName')]",
                                        "properties": {
                                            "addressPrefix": "[parameters('transitGatewaySubnetCidr')]"
                                        }
                                    },
                                    {
                                        "name": "[variables('bastionSubnetName')]",
                                        "properties": {
                                            "addressPrefix": "[parameters('transitBastionSubnetCidr')]",
                                            "networkSecurityGroup": {
                                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('bastionNsgName'))]"
                                            }
                                        }
                                    },
                                    {
                                        "name": "[variables('fwPayloadSubnetName')]",
                                        "properties": {
                                            "addressPrefix": "[parameters('transitFwSubnetPayCidr')]"
                                        }
                                    },
                                    {
                                        "name": "[variables('appGwSubnetName')]",
                                        "properties": {
                                            "addressPrefix": "[parameters('transitAppGwSubnetCidr')]"
                                        }
                                    }
                                ],
                                "enableDdosProtection": "[variables('vnetStandardDdosProtection')]",
                                "dhcpOptions": {
                                    "dnsServers": [
                                        "[reference(variables('firewallName')).ipConfigurations[0].properties.privateIPAddress]"
                                    ]
                                }
                            },
                            "resources": [
                            ]
                        }
                    ]
                }
            }
        },
        {
            "name": "[variables('appgwRouteTableName')]",
            "type": "Microsoft.Network/routeTables",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[parameters('tags')]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/',variables('deployDnsServerSettings'))]"
            ],
            "properties": {
                "routes": [
                ],
                "disableBgpRoutePropagation": "True"
            },
            "resources": [
            ]
        },
        {
            "name": "[variables('bastionName')]",
            "type": "Microsoft.Network/bastionHosts",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIpAddresses', variables('bastionPublicIpName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('transitVnetName'))]",
                "[concat('Microsoft.Resources/deployments/', variables('deployDnsServerSettings'))]"
            ],
            "tags": "[parameters('tags')]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "bastionConfig",
                        "properties": {
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('transitVnetName'), variables('bastionSubnetName'))]"
                            },
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIpAddresses', variables('bastionPublicIpName'))]"
                            },
                            "privateIPAllocationMethod": "Dynamic"
                        }
                    }
                ]
            }
        },
        {
            "name": "[concat(variables('bastionName'),'/microsoft.insights/diag')]",
            "type": "Microsoft.Network/bastionHosts/providers/diagnosticSettings",
            "apiVersion": "[variables('diagnosticApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[parameters('tags')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/bastionHosts',variables('bastionName'))]"
            ],
            "properties": {
                "name": "SendToWorkspace",
                "workspaceId": "[reference(variables('deployLaw')).outputs.logAnalyticsResourceId.value]",
                "logs": [
                    {
                        "category": "BastionAuditLogs",
                        "enabled": true
                    }
                ],
                "metrics": [
                ]
            },
            "resources": [
            ]
        },
        {
            "name": "[variables('deployAppGwRt')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('resourcesApiVersion')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/bastionHosts',variables('bastionName'))]",
                "[resourceId('Microsoft.Network/routeTables',variables('appgwRouteTableName'))]",
                "[concat('Microsoft.Resources/deployments/', variables('deployBastionNsgFlowLog'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {},
                    "variables": {},
                    "resources": [
                        {
                            "type": "Microsoft.Network/virtualNetworks",
                            "name": "[variables('transitVnetName')]",
                            "apiVersion": "[variables('networkApiVersion')]",
                            "location": "[variables('location')]",
                            "tags": "[parameters('tags')]",
                            "dependsOn": [
                            ],
                            "properties": {
                                "addressSpace": {
                                    "addressPrefixes": [
                                        "[parameters('transitVnetCidr')]"
                                    ]
                                },
                                "subnets": [
                                    {
                                        "name": "[variables('gatewaySubnetName')]",
                                        "properties": {
                                            "addressPrefix": "[parameters('transitGatewaySubnetCidr')]"
                                        }
                                    },
                                    {
                                        "name": "[variables('bastionSubnetName')]",
                                        "properties": {
                                            "addressPrefix": "[parameters('transitBastionSubnetCidr')]",
                                            "networkSecurityGroup": {
                                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('bastionNsgName'))]"
                                            }
                                        }
                                    },
                                    {
                                        "name": "[variables('fwPayloadSubnetName')]",
                                        "properties": {
                                            "addressPrefix": "[parameters('transitFwSubnetPayCidr')]"
                                        }
                                    },
                                    {
                                        "name": "[variables('appGwSubnetName')]",
                                        "properties": {
                                            "addressPrefix": "[parameters('transitAppGwSubnetCidr')]",
                                            "routeTable": {
                                                "id": "[resourceId('Microsoft.Network/routeTables', variables('appgwRouteTableName'))]"
                                            }
                                        }
                                    }
                                ],
                                "enableDdosProtection": "[variables('vnetStandardDdosProtection')]",
                                "dhcpOptions": {
                                    "dnsServers": [
                                        "[reference(variables('firewallName')).ipConfigurations[0].properties.privateIPAddress]"
                                    ]
                                }
                            },
                            "resources": [
                            ]
                        }
                    ]
                }
            }
        },
        {
            "name": "[variables('appGwUmi')]",
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
            "apiVersion": "[variables('managedIdentityApiVersion')]",
            "tags": "[parameters('tags')]",
            "location": "[variables('location')]"
        },
        {
            "name": "[variables('dsScriptUmiDeploy')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('resourcesApiVersion')]",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {},
                    "variables": {},
                    "resources": [
                        {
                            "name": "[variables('deploymentScriptUmi')]",
                            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                            "apiVersion": "[variables('managedIdentityApiVersion')]",
                            "tags": "[parameters('tags')]",
                            "location": "[variables('location')]"
                        }
                    ],
                    "outputs": {
                        "dsUmiResourceId": {
                            "type": "string",
                            "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities',variables('deploymentScriptUmi'))]"
                        },
                        "dsUmiPrincipleId": {
                            "type": "string",
                            "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities',variables('deploymentScriptUmi')),'2018-11-30').principalId]"
                        }
                    }
                }
            }
        },
        {
            "name": "[variables('deployKeyVault')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('resourcesApiVersion')]",
            "subscriptionId": "[parameters('sharedSvcSubscriptionId')]",
            "resourceGroup": "[parameters('sharedSvcRgName')]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/',variables('deployAppGwRt'))]",
                "[concat('Microsoft.Resources/deployments/',variables('dsScriptUmiDeploy'))]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('appGwUmi'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "keyVaultAdminObjectId": {
                        "value": "[parameters('keyVaultAdminObjectId')]"
                    },
                    "keyVaultNamePrefix": {
                        "value": "kvcnt"
                    },
                    "laWorkspaceResourceId": {
                        "value": "[reference(variables('deployLaw')).outputs.logAnalyticsResourceId.value]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    },
                    "uniqueData": {
                        "value": "[parameters('uniqueData')]"
                    }
                },
                "templateLink": {
                    "uri": "[variables('keyVaultDeploymentUri')]",
                    "contentVersion": "1.0.0.0"
                }
            }
        },
        {
            "name": "[variables('keyVaultAgwPermDeploymentName')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('resourcesApiVersion')]",
            "subscriptionId": "[parameters('sharedSvcSubscriptionId')]",
            "resourceGroup": "[parameters('sharedSvcRgName')]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/',variables('deployKeyVault'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "keyVaultName": {
                        "value": "[reference(variables('deployKeyVault')).outputs.keyVaultName.value]"
                    },
                    "objectId": {
                        "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities',variables('appGwUmi'))).principalId]"
                    },
                    "secretPermissions": {
                        "value": [
                            "get",
                            "list"
                        ]
                    },
                    "certPermissions": {
                        "value": [
                            "get",
                            "list"
                        ]
                    }
                },
                "templateLink": {
                    "uri": "[variables('keyVaultPermDeploymentUri')]",
                    "contentVersion": "1.0.0.0"
                }
            }
        },
        {
            "name": "[variables('keyVaultDsPermDeploymentName')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('resourcesApiVersion')]",
            "subscriptionId": "[parameters('sharedSvcSubscriptionId')]",
            "resourceGroup": "[parameters('sharedSvcRgName')]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/',variables('keyVaultAgwPermDeploymentName'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "keyVaultName": {
                        "value": "[reference(variables('deployKeyVault')).outputs.keyVaultName.value]"
                    },
                    "objectId": {
                        "value": "[reference(variables('dsScriptUmiDeploy')).outputs.dsUmiPrincipleId]"
                    },
                    "secretPermissions": {
                        "value": [
                            "get",
                            "list"
                        ]
                    },
                    "certPermissions": {
                        "value": [
                            "get",
                            "list",
                            "create"
                        ]
                    }
                },
                "templateLink": {
                    "uri": "[variables('keyVaultPermDeploymentUri')]",
                    "contentVersion": "1.0.0.0"
                }
            }
        },
        {
            "name": "[parameters('roleNameGuid')]",
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "[variables('roleAssignmentApiVersion')]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/',variables('keyVaultDsPermDeploymentName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                "principalId": "[reference(variables('dsScriptUmiDeploy')).outputs.dsUmiPrincipleId]"
            }
        },
        {
            "name": "[variables('appGwCertCreate')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('resourcesApiVersion')]",
            "dependsOn": [
                "[resourceId('Microsoft.Authorization/roleAssignments',parameters('roleNameGuid'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "appGwCertName": {
                        "value": "[variables('appGwCertName')]"
                    },
                    "customWebDomain": {
                        "value": "[parameters('customWebDomain')]"
                    },
                    "deploymentScriptUmiResId": {
                        "value": "[reference(variables('dsScriptUmiDeploy')).outputs.dsUmiResourceId.value]"
                    },
                    "keyVaultName": {
                        "value": "[reference(variables('deployKeyVault')).outputs.keyVaultName.value]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    },
                    "webAppName": {
                        "value": "[variables('uniqueWebAppName')]"
                    }
                },
                "templateLink": {
                    "uri": "[variables('appGwPostDeploymentUri')]",
                    "contentVersion": "1.0.0.0"
                }
            }
        },
        {
            "name": "[variables('appGwName')]",
            "type": "Microsoft.Network/applicationGateways",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[parameters('tags')]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', variables('appGwCertCreate'))]",
                "[resourceId('Microsoft.Network/publicIpAddresses',variables('appGwPublicIpName'))]"
            ],
            "properties": {
                "sku": {
                    "name": "WAF_v2",
                    "tier": "WAF_v2",
                    "capacity": 1
                },
                "gatewayIPConfigurations": [
                    {
                        "name": "appGatewayIpConfig",
                        "properties": {
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('transitVnetName'), variables('appGwSubnetName'))]"
                            }
                        }
                    }
                ],
                "frontendIPConfigurations": [
                    {
                        "name": "appGwPubFrontEnd",
                        "properties": {
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIpAddresses',variables('appGwPublicIpName'))]"
                            }
                        }
                    },
                    {
                        "name": "appGwPrivateFrontEnd",
                        "properties": {
                            "privateIPAddress": "[parameters('appGwPrivateIp')]",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('transitVnetName'), variables('appGwSubnetName'))]"
                            }
                        }
                    }
                ],
                "frontendPorts": [
                    {
                        "name": "http_port",
                        "properties": {
                            "Port": 80
                        }
                    },
                    {
                        "name": "https_port",
                        "properties": {
                            "Port": 443
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "sample_app",
                        "properties": {
                            "backendAddresses": [
                                "[concat(variables('uniqueWebAppName'),'.azurewebsites.net')]"
                            ]
                        }
                    }
                ],
                "backendHttpSettingsCollection": [
                    {
                        "name": "http_httpsetting",
                        "properties": {
                            "Port": 80,
                            "Protocol": "Http",
                            "cookieBasedAffinity": "Disabled",
                            "requestTimeout": 20,
                            "pickHostNameFromBackendAddress": true
                        }
                    },
                    {
                        "name": "https_httpsetting",
                        "properties": {
                            "Port": 443,
                            "Protocol": "Https",
                            "cookieBasedAffinity": "Disabled",
                            "requestTimeout": 20,
                            "pickHostNameFromBackendAddress": true
                        }
                    }
                ],
                "httpListeners": [
                    {
                        "name": "http_listener",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat(variables('applicationGatewayId'), '/frontendIPConfigurations/appGwPubFrontEnd')]"
                            },
                            "frontendPort": {
                                "id": "[concat(variables('applicationGatewayId'), '/frontendPorts/http_port')]"
                            },
                            "protocol": "Http",
                            "sslCertificate": null,
                            "hostNames": [
                                "[concat('*.',parameters('customWebDomain'))]"
                            ],
                            "requireServerNameIndication": false
                        }
                    },
                    {
                        "name": "https_listener",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat(variables('applicationGatewayId'), '/frontendIPConfigurations/appGwPubFrontEnd')]"
                            },
                            "frontendPort": {
                                "id": "[concat(variables('applicationGatewayId'), '/frontendPorts/https_port')]"
                            },
                            "protocol": "Https",
                            "sslCertificate": {
                                "id": "[concat(variables('applicationGatewayId'), '/sslCertificates/', variables('appGwCertName'))]"
                            },
                            "hostNames": [
                                "[concat('*.',parameters('customWebDomain'))]"
                            ],
                            "requireServerNameIndication": false
                        }
                    }
                ],
                "requestRoutingRules": [
                    {
                        "Name": "placeholder",
                        "properties": {
                            "RuleType": "Basic",
                            "httpListener": {
                                "id": "[concat(variables('applicationGatewayId'), '/httpListeners/https_listener')]"
                            },
                            "backendAddressPool": {
                                "id": "[concat(variables('applicationGatewayId'), '/backendAddressPools/sample_app')]"
                            },
                            "backendHttpSettings": {
                                "id": "[concat(variables('applicationGatewayId'), '/backendHttpSettingsCollection/https_httpsetting')]"
                            }
                        }
                    }
                ],
                "sslCertificates": [
                    {
                        "name": "[variables('appGwCertName')]",
                        "properties": {
                            "keyVaultSecretId": "[reference(variables('appGwCertCreate')).outputs.result.value]"
                        }
                    }
                ],
                "enableHttp2": false,
                "probes": [],
                "webApplicationFirewallConfiguration": {
                    "enabled": true,
                    "firewallMode": "Detection",
                    "ruleSetType": "OWASP",
                    "ruleSetVersion": "3.0"
                }
            },
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                    "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('appGwUmi'))]": {}
                }
            }
        }
    ],
    "outputs": {
        "appGwName": {
            "type": "string",
            "value": "[variables('appGwName')]"
        },
        "appGwRouteTableName": {
            "type": "string",
            "value": "[variables('appGwRouteTableName')]"
        },
        "appServicesWebAppName": {
            "type": "string",
            "value": "[variables('uniqueWebAppName')]"
        },
        "centralKeyVaultName": {
            "type": "string",
            "value": "[reference(variables('deployKeyVault')).outputs.keyVaultName.value]"
        },
        "centralKeyVaultResourceId": {
            "type": "string",
            "value": "[reference(variables('deployKeyVault')).outputs.KeyVaultResourceId.value]"
        },
        "firewallIp": {
            "type": "string",
            "value": "[reference(variables('firewallName')).ipConfigurations[0].properties.privateIPAddress]"
        },
        "lawName": {
            "type": "string",
            "value": "[reference(variables('deployLaw')).outputs.logAnalyticsName.value]"
        },
        "lawResourceId": {
            "type": "string",
            "value": "[reference(variables('deployLaw')).outputs.logAnalyticsResourceId.value]"
        },
        "nsgStorageAccountResourceId": {
            "type": "string",
            "value": "[resourceId('Microsoft.Storage/storageAccounts',variables('logStorageAccountName'))]"
        },
        "transitVnetName": {
            "type": "string",
            "value": "[variables('transitVnetName')]"
        },
        "transitVnetResourceId": {
            "type": "string",
            "value": "[resourceId('Microsoft.Network/virtualNetworks',variables('transitVnetName'))]"
        }
    }
}
